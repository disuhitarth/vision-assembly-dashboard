version: '3.8'

services:
  # Database - TimescaleDB for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: vision_db
      POSTGRES_USER: vision_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vision_pass}
      POSTGRES_INITDB_ARGS: "-A md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vision_user -d vision_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching and WebSocket session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      MODE: ${MODE:-demo}
      DATABASE_URL: postgresql://vision_user:${DB_PASSWORD:-vision_pass}@postgres:5432/vision_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      
      # PLC Configuration
      PLC_HOST: ${PLC_HOST:-192.168.1.100}
      PLC_SLOT: ${PLC_SLOT:-0}
      PLC_RACK: ${PLC_RACK:-1}
      
      # Vision Configuration
      KEYENCE_IP: ${KEYENCE_IP:-192.168.1.101}
      KEYENCE_PORT: ${KEYENCE_PORT:-8501}
      DEFECT_THRESHOLD: ${DEFECT_THRESHOLD:-0.7}
      
      # LLM Configuration
      LLM_API_KEY: ${LLM_API_KEY}
      LLM_MODEL: ${LLM_MODEL:-gpt-4}
      
      # Demo Mode Settings
      DEMO_CYCLE_TIME: ${DEMO_CYCLE_TIME:-850}
      DEMO_FAULT_RATE: ${DEMO_FAULT_RATE:-0.02}
      DEMO_DEFECT_RATE: ${DEMO_DEFECT_RATE:-0.05}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../models:/app/models  # ONNX models
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web App
  web:
    build:
      context: ../apps/web
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:4000}
      NEXT_PUBLIC_MODE: ${MODE:-demo}
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

  # MQTT Broker for IoT device communication (optional)
  mosquitto:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    restart: unless-stopped

  # File server for vision images and logs
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - vision_images:/usr/share/nginx/html/images
      - api_logs:/usr/share/nginx/html/logs
    depends_on:
      - api
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  mosquitto_data:
  mosquitto_logs:
  vision_images:
  api_logs:

networks:
  default:
    name: vision-dashboard-network